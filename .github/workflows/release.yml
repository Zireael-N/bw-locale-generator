name: release

permissions:
  contents: write

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create a GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create \
            ${{ github.ref_name }} \
            --repo ${{ github.event.repository.full_name }} \
            --verify-tag \
            --generate-notes

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, win-msvc, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout the repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        persist-credentials: false

    - name: Install Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Build the release binaries
      run: cargo build --verbose --release --target ${{ matrix.target }}

    - name: Build an archive
      shell: bash
      run: |
        OUTPUT_DIR="bw_locale_generator-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$OUTPUT_DIR"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/${{ matrix.target }}/release/generate_toml_from_dir.exe" "$OUTPUT_DIR/"
          cp "target/${{ matrix.target }}/release/generate_toml_from_one.exe" "$OUTPUT_DIR/"
          cp "target/${{ matrix.target }}/release/localize_npc_names.exe" "$OUTPUT_DIR/"
          ASSET="$OUTPUT_DIR.zip"
          7z a "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/generate_toml_from_dir" "$OUTPUT_DIR/"
          cp "target/${{ matrix.target }}/release/generate_toml_from_one" "$OUTPUT_DIR/"
          cp "target/${{ matrix.target }}/release/localize_npc_names" "$OUTPUT_DIR/"
          ASSET="$OUTPUT_DIR.tar.gz"
          tar czf "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        fi

    - name: Upload the archive
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload \
          ${{ github.ref_name }} \
          "${{ env.ASSET }}" \
          --repo ${{ github.event.repository.full_name }}
